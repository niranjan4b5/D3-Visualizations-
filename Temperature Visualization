<!DOCTYPE html>
<meta charset="utf-8">
<body>
<style>
svg {
  font: 10px ;
}


.axis path, .axis line {
  shape-square: ;
  fill: none;  
  stroke: lavender;
}

path.err {
  stroke-width: 1.5px;
  stroke: black;
}
</style>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
var m = [10, 10, 10, 30],
    w = 960 - m[1] - m[3],
    h = 450 - m[0] - m[2],
    x = d3.scale.linear().range([0,w]),
    y = d3.scale.linear().range([h,0]),
    xaxis = d3.svg.axis().scale(x).orient("bottom").tickSize(-h),
    yaxis = d3.svg.axis().scale(y).orient("left").tickSize(-w),
    area = d3.svg.area()
    .interpolate("cardinal")
    .x(function(d) { return x(d.day); })
    .y0(function(d) { return y(d.temp+d.e); })
    .y1(function(d) { return y(d.temp-d.e); });
    eb = errorBar()
          .oldXScale(x)
          .xScale(x)
          .oldYScale(y)
          .yScale(y)
          .yValue(function(d){return d.temp})
          .xValue(function(d){return d.day})
          .xError(function(d){return null})
          .yError(function(d){return d.e});

var svg = d3.select("body").append("svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("g")
    .attr("class","container")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

d3.json("temperature.json", function(error,data) {
    if (error) return console.warn(error);    
    x.domain([d3.min(data.map(function(d) {return d.day})),d3.max(data.map(function(d) { return d.day; }))]);
    y.domain([d3.min(data.map(function(d) {return (d.temp - d.e)})),d3.max(data.map(function(d) { return (d.temp + d.e); }))]);
    var path = svg.append("path")
      .datum(data)
      .attr("class", "area")
      .attr("d", area(data))
      .attr("stroke", "lightgreen")
      .attr("stroke-width", "2")
      .attr("fill", "lightgreen");
    var totalLength = path.node().getTotalLength();

    path
      .attr("stroke-dasharray", totalLength + " " + totalLength)
      .attr("stroke-dashoffset", totalLength)
      .transition()
        .duration(2000)
        .ease("wave")
        .attr("stroke-dashoffset", 0);
    var svgdata = svg.selectAll("g").data(data),
    svgdataEnter = svgdata.enter().append("g")
            .attr("transform",function(d){return "translate(" + x(d.day) + "," + y(d.temp) + ")"});    
    svgdataEnter.append("circle")
          .attr("r", 4)
          .attr("fill","black");
    svgdataEnter.call(eb);
    svg.append("g")
      .attr("class","axis x")
      .attr("transform", "translate(0," + y.range()[0] + ")")  
      .call(xaxis)
      .append("text")
      .attr("class", "label")
      .attr("x", w)
      .attr("y", -6)
      .style("font-size", "14px")
      .style("text-anchor", "end")
      .text("days");
 
    svg.append("g")
      .attr("class","axis y")
      .attr("transform", "translate(" + x.range()[0] + ",0)")
      .call(yaxis)
      .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("font-size", "12px")
      .style("text-anchor", "end")
      .text("Temperature (F)");
   svg.append("text")
      .attr("x", (width / 2))             
      .attr("y", 0 - (margin.top / 2))
      .attr("text-anchor", "middle")  
      .style("font-size", "16px") 
      .style("text-decoration", "underline")  
      .text("Miami Temperatures"); 
});
svg.select(".x.axis")
      .transition()
      .duration(1000)
      .call(xAxis);
      
    svg.select(".y.axis")
      .transition()
      .duration(1000)
      .call(yAxis);
function errorBar(){
    var size = 5,
    xError = function(d) {return exists(d[0].s);}, 
    yError = function(d) {return exists(d[1].s);},
    errormarker = null, //points will inherit from g.dataset   
    xValue = function(d) {return (d[0].x === undefined)?d[0]:d[0].x;}, 
    yValue = function(d) {return (d[1].x === undefined)?d[1]:d[1].x;},
    oldXScale, 
    oldYScale,
    xScale,
    yScale;
        
    function values(datapoints){        
        datapoints.each(function(d,i) {            
            var g = d3.select(this),            
            errormarker = errormarker || exists(g.datum().errormarker);
                                    
            var err = g.selectAll(".err")
                .data(function(d){return (!(xError(d) === null) || !(yError(d) === null))?[d]:[]},xValue),
            errEnter,
            errExit,
            errUpdate;                            
            

            switch (errormarker) {                               
            case null: {
                errEnter = err.enter().append("path").attr("class","err")
                errExit = d3.transition(err.exit()).remove(), 
                errUpdate = d3.transition(err),
                errTransform = function(selection,a,b){
                    selection.attr("d", function(d){
                        var h = (yError(d) === null)?[-size,size]:[(b(yValue(d) - yError(d)) - b(yValue(d))),(b(yValue(d) + yError(d)) - b(yValue(d)))],
                        w = (xError(d) === null)?[-size,size]:[(a(xValue(d) - xError(d)) - a(xValue(d))),(a(xValue(d) + xError(d)) - a(xValue(d)))];
                        
                        return "M 0," + h[0] + 
                            " L 0," + h[1] +
                            " M " + w[0] + "," + h[1] +
                            " L " + w[1] + "," + h[1] + 
                            " M " + w[0] + "," + h[0] +
                            " L " + w[1] + "," + h[0]
                    })};;
                break;
            }
            case errormarker: {
                err.append("use").attr("class",marker + " err");
                err.selectAll("use").attr("xlink:href","#" + marker)
                    .attr("transform",function(d){return "scale(" + xError(d) + "," + yError(d) + ")"});
                break;
            }
            };

            if (xScale.ticks) {
                errEnter.call(errTransform, oldXScale, oldYScale);
                errUpdate.call(errTransform, xScale, yScale);
                errExit.call(errTransform, xScale, yScale);
            }
            
           
            else {
                var dx = xScale.rangeBand() / 2, x = function(d) { return xScale(d) + dx; };
                var dy = yScale.rangeBand() / 2, y = function(d) { return yScale(d) + dy; };
                errEnter.call(errTransform, x, y);
                errUpdate.call(errTransform, x, y);
            }
        });
    }

    values.size = function(_) {
        if (!arguments.length) return size;
        size = _;
        return values;
    };

    values.xError = function(_) {
        if (!arguments.length) return xError;
        xError = _;
        return values;
    };

    values.yError = function(_) {
        if (!arguments.length) return yError;
        yError = _;
        return values;
    };    

    values.oldXScale = function(_) {
        if (!arguments.length) return oldXScale;
        oldXScale = _;
        return values;
    };

    values.oldYScale = function(_) {
        if (!arguments.length) return oldYScale;
        oldYScale = _;
        return values;
    };

    values.xScale = function(_) {
        if (!arguments.length) return xScale;
        xScale = _;
        return values;
    };

    values.yScale = function(_) {
        if (!arguments.length) return yScale;
        yScale = _;
        return values;
    };

     values.xValue = function(_) {
        if (!arguments.length) return xValue;
        xValue = _;
        return values;
    };

    values.yValue = function(_) {
        if (!arguments.length) return yValue;
        yValue = _;
        return values;
    };

    values.errormarker = function(_) {
        if (!arguments.length) return errormarker;
        errormarker = _;
        return values;
    };

    return values;
};

function exists(a){
    return (a === undefined)?null:a;
};
</script>
</body>
</html>
